{"version":3,"sources":["Form.js","components/header/header.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","style","textDecoration","isCompleted","className","text","onClick","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","Form","todos","setTodos","newTodos","splice","map","Header","Footer","marginTop","marginLeft","color","Date","getFullYear","href","App","React","Component","openPopupbox","content","PopupboxManager","open","config","fadeIn","fadeInSpeed","render","this","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb2fc51d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n  return (\n    <div\n      style={{ textDecoration: todo.isCompleted ? 'line-through red' : '' }}\n      className='todo'\n    >\n      {todo.text}\n      <div>\n        <button onClick={() => completeTodo(index)}>Complete</button>\n        <button onClick={() => removeTodo(index)}>X</button>\n      </div>\n    </div>\n  );\n}\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue('');\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type='text'\n        className='todo-input'\n        placeholder='Add to the list'\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\n\nfunction Form() {\n  const [todos, setTodos] = useState([\n    {\n      text: 'Verify the lift area is clear of objects and people',\n      isCompleted: false,\n    },\n    {\n      text: 'Drive vehicle on to lift',\n      isCompleted: false,\n    },\n    {\n      text: 'Perform walk around inspection',\n      isCompleted: false,\n    },\n    {\n      text: 'Verify vehicle in-service date',\n      isCompleted: false,\n    },\n    {\n      text: 'Check vehicle title status',\n      isCompleted: false,\n    },\n    {\n      text: 'Verify vehicle is not reported as stolen',\n      isCompleted: false,\n    },\n    {\n      text: 'Check for open campaigns',\n      isCompleted: false,\n    },\n    {\n      text: 'Connect ICOM and perform vehicle test',\n      isCompleted: false,\n    },\n    {\n      text: 'Open hood and perform visual inspection',\n      isCompleted: false,\n    },\n    {\n      text: 'Read results of the vehicle test',\n      isCompleted: false,\n    },\n    {\n      text:\n        'Determine if vehicle repairs will be covered under new vehicle warranty',\n      isCompleted: false,\n    },\n    {\n      text:\n        'Determine if vehicle repairs will be covered under extended warranty',\n      isCompleted: false,\n    },\n    {\n      text:\n        'Determine if vehicle repairs will be covered under emissions warranty',\n      isCompleted: false,\n    },\n    {\n      text: 'Continue with Test Plans if available',\n      isCompleted: false,\n    },\n    {\n      text: 'Send request to the parts counter and verify parts availability',\n      isCompleted: false,\n    },\n    {\n      text: 'Compile list of repairs with labor times and parts',\n      isCompleted: false,\n    },\n    {\n      text: 'Report back results of recommended repairs to Service Advisor',\n      isCompleted: false,\n    },\n    {\n      text: 'Park vehicle if parking is available',\n      isCompleted: false,\n    },\n    {\n      text: 'Wait for authorization from Service Writer',\n      isCompleted: false,\n    },\n    {\n      text: 'Drive in the next vehicle to repeat todo list',\n      isCompleted: false,\n    },\n  ]);\n\n  const addTodo = (text) => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n  const completeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  };\n  const removeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className='todo-list'>\n      {todos.map((todo, index) => (\n        <Todo\n          key={index}\n          index={index}\n          todo={todo}\n          completeTodo={completeTodo}\n          removeTodo={removeTodo}\n        />\n      ))}\n      <TodoForm addTodo={addTodo} />\n    </div>\n  );\n}\n\nexport default Form;\n","import React from 'react';\nimport './header.css';\nexport const Header = () => (\n  <header>\n    <h1 className='title'>BMW Technician Checklist</h1>\n  </header>\n);\n","import React from 'react';\n\nexport const Footer = () => (\n  <footer\n    style={{\n      marginTop: `48rem`,\n      marginLeft: `40rem`,\n      color: `#ffffff`,\n    }}\n  >\n    Â© {new Date().getFullYear()} Juan Perez, Built with\n    {` `}\n    <a\n      style={{ textDecoration: `none`, color: `dodgerblue` }}\n      href='https://reactjs.org/'\n    >\n      Reactjs\n    </a>\n  </footer>\n);\n","import React from 'react';\nimport './App.css';\nimport Form from './Form';\nimport { PopupboxManager, PopupboxContainer } from 'react-popupbox';\nimport 'react-popupbox/dist/react-popupbox.css';\nimport { Header } from './components/header/header';\nimport { Footer } from './components/footer/footer';\n\nexport default class App extends React.Component {\n  openPopupbox() {\n    const content = <Form />;\n    PopupboxManager.open({\n      content,\n      config: { fadeIn: true, fadeInSpeed: 800 },\n    });\n  }\n\n  render() {\n    return (\n      <div className='app'>\n        <Header />\n        <button className='checklist-btn' onClick={this.openPopupbox}>\n          Show Checklist\n        </button>\n        <PopupboxContainer />\n        <Footer />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}